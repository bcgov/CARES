// <copyright file="PostOperationcares_approvalCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>7/16/2018 3:20:45 PM</date>
// <summary>Implements the PostOperationcares_approvalCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Net;
using System.ServiceModel;
using AutoNumberGeneration;
using Cares.Crm.Core.Allotment;
using Microsoft.Xrm.Sdk;

namespace Cares.Crm.Plugin
{

    /// <summary>
    /// PostOperationcares_approvalCreate Plugin.
    /// </summary>    
    public class PostOperationcares_approvalCreate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationcares_approvalCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostOperationcares_approvalCreate(string unsecure, string secure)
            : base(typeof(PostOperationcares_approvalCreate))
        {

            // TODO: Implement your custom configuration handling.
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var pluginContext = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;
            var trace = localContext.TracingService;

            var caresHelper = new CaresHelper();

            trace.Trace("PostOperationcares_approvalCreate Plugin Starts...");
            trace.Trace("Plugin InitiatingUserId : " + pluginContext.InitiatingUserId);
            trace.Trace("Plugin UserId : " + pluginContext.UserId);
            trace.Trace("Plugin Depth : " + pluginContext.Depth);
            trace.Trace("Plugin Stage : " + pluginContext.Stage);

            //Now No need to check Depth
            //if (pluginContext.Depth == 2)
            //{
            //    trace.Trace("going to cancel this plugin because Plugin Depth is : " + pluginContext.Depth);
            //    return;
            //}

            int renewalRule = -1;
            Guid contactId = new Guid();
            DateTime approvalStartDate = DateTime.Now;
            DateTime approvalExpiryDate = DateTime.MaxValue;
            bool doReset = false;

            try
            {
                trace.Trace("pluginContext InputParameters Target is : " + pluginContext.InputParameters["Target"]);
                if (pluginContext.InputParameters.Contains("Target") && pluginContext.InputParameters["Target"] is Entity &&
                    ((Entity)pluginContext.InputParameters["Target"]).LogicalName == "cares_approval")
                {
                    var entityContext = (Entity)pluginContext.InputParameters["Target"];
                    trace.Trace("pluginContext InputParameters retrived Target entity");
                    if (entityContext.Attributes.Contains("cares_startdate") || entityContext.Attributes.Contains("cares_enddate") ||
                        entityContext.Attributes.Contains("cares_programid") || entityContext.Attributes.Contains("cares_contactid") ||
                        entityContext.Attributes.Contains("cares_approvalstartdate"))
                    {
                        trace.Trace("pluginContext InputParameters retrived Target entity contains checking parameters : cares_startdate or cares_enddate or cares_programid or cares_contactid or cares_approvalstartdate");
                        trace.Trace("pluginContext InputParameters retrived check reset value");
                        if (entityContext.Attributes.Contains("cares_isreset") && ((bool)entityContext.Attributes["cares_isreset"]) == true)
                        {
                            doReset = true;
                        }
                        trace.Trace("pluginContext InputParameters retrived reset value is : " + doReset);
                        if (pluginContext.Stage == 20)  //Pre-Operation
                        {
                            Entity entityData = null;
                            if (pluginContext.MessageName == "Create")
                            {
                                entityData = entityContext;

                                //AutoNumberGeneration
                                var generateAutoNumber = new GenerateAutoNumber();
                                string nextNumber = generateAutoNumber.GetNextAvailableAutoGeneratedNumber("cares_approval", service, trace);
                                trace.Trace("PreOperationcares_approvalCreate got next Approval number is : " + nextNumber);
                                entityContext.Attributes["cares_approvalnumber"] = nextNumber;
                            }
                            else
                            {
                                entityData = service.Retrieve(entityContext.LogicalName, entityContext.Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(true));
                            }
                            if (entityContext.Attributes.Contains("cares_programid"))
                            {
                                trace.Trace("cares_programid value is  : " + ((EntityReference)entityContext.Attributes["cares_programid"]).Id);
                                renewalRule = caresHelper.GetProgramRenewalRule(((EntityReference)entityContext.Attributes["cares_programid"]).Id, service, trace);
                            }
                            else if (entityData.Attributes.Contains("cares_programid"))
                            {
                                trace.Trace("cares_programid value is  : " + ((EntityReference)entityData.Attributes["cares_programid"]).Id);
                                renewalRule = caresHelper.GetProgramRenewalRule(((EntityReference)entityData.Attributes["cares_programid"]).Id, service, trace);
                            }
                            trace.Trace("getting Contact id");
                            if (entityContext.Attributes.Contains("cares_contactid"))
                            {
                                trace.Trace("cares_contactid value is  : " + ((EntityReference)entityContext.Attributes["cares_contactid"]).Id);
                                contactId = ((EntityReference)entityContext.Attributes["cares_contactid"]).Id;
                            }
                            else if (entityData.Attributes.Contains("cares_contactid"))
                            {
                                trace.Trace("cares_contactid value is  : " + ((EntityReference)entityData.Attributes["cares_contactid"]).Id);
                                contactId = ((EntityReference)entityData.Attributes["cares_contactid"]).Id;
                            }

                            var entityUpdate = entityContext; //new Entity(entityContext.LogicalName);
                            entityUpdate.Id = entityContext.Id;
                            trace.Trace("entityUpdate id is  : " + entityUpdate.Id);
                            if (entityContext.Attributes.Contains("cares_startdate"))
                            {
                                trace.Trace("pluginContext entity contains cares_startdate : " + entityContext.Attributes["cares_startdate"]);
                                approvalStartDate = (DateTime)entityContext.Attributes["cares_startdate"];
                            }
                            else if (entityContext.Attributes.Contains("cares_approvalstartdate"))
                            {
                                trace.Trace("pluginContext entity contains cares_approvalstartdate : " + entityContext.Attributes["cares_approvalstartdate"]);
                                approvalStartDate = (DateTime)entityContext.Attributes["cares_approvalstartdate"];
                            }
                            else if (entityData.Attributes.Contains("cares_startdate"))
                            {
                                trace.Trace("entityData entity contains cares_startdate : " + entityData.Attributes["cares_startdate"]);
                                approvalStartDate = (DateTime)entityData.Attributes["cares_startdate"];
                            }

                            trace.Trace("renewal rule value is  : " + renewalRule);

                            trace.Trace("Getting Approval Expiry/End Date and initializing approvalExpiryDate is : " + approvalExpiryDate);
                            if (entityContext.Attributes.Contains("cares_enddate") && entityContext.Attributes["cares_enddate"] != null)
                            {
                                trace.Trace("getting end date from entityContext");
                                trace.Trace("entityData value is  : " + (DateTime)entityContext.Attributes["cares_enddate"]);
                                approvalExpiryDate = (DateTime)entityContext.Attributes["cares_enddate"];
                            }
                            else if (entityData.Attributes.Contains("cares_enddate") && entityData.Attributes["cares_enddate"] != null)
                            {
                                trace.Trace("getting end date from entityData");
                                trace.Trace("entityData value is  : " + (DateTime)entityData.Attributes["cares_enddate"]);
                                approvalExpiryDate = (DateTime)entityData.Attributes["cares_enddate"];
                            }

                            trace.Trace("approvalExpiryDate is  : " + approvalExpiryDate);

                            if (renewalRule == (int)CaresHelper.RenewalRule.StartDate)
                            {
                                
                                trace.Trace(" TEST CASE approvalExpiryDate : " + approvalExpiryDate);
                                trace.Trace(" TEST CASE approvalStartDate : " + approvalStartDate.AddYears(1));

                                if (approvalExpiryDate < approvalStartDate.AddYears(1))
                                {
                                    trace.Trace(" expiry date is less than StartDate + 1 year, Start Date + 1 Year is : " + approvalStartDate.AddYears(1));
                                    entityUpdate.Attributes["cares_approvalenddate"] = approvalExpiryDate;
                                    entityUpdate.Attributes["cares_nextrenewaldate"] = approvalExpiryDate;
                                }
                                else
                                {
                                    DateTime approvalEndDate = approvalStartDate.AddYears(1);
                                    trace.Trace("renewal rule is start date and approval start date is  : " + approvalStartDate);
                                    if (approvalEndDate.Year <= DateTime.Now.Year && approvalEndDate.Month < DateTime.Now.Month)
                                    {
                                        trace.Trace("case 1: ");
                                        trace.Trace("approvalStartDate plus add one year value is less than today date : " + approvalStartDate.AddYears(1));
                                        approvalEndDate = new DateTime(DateTime.Now.Year + 1, approvalStartDate.Month, approvalStartDate.Day);
                                        trace.Trace("ne wapproval end date is  : " + approvalEndDate);
                                        entityUpdate.Attributes["cares_approvalenddate"] = approvalEndDate.AddDays(-1);
                                        entityUpdate.Attributes["cares_nextrenewaldate"] = approvalEndDate;
                                    }
                                    else if (approvalEndDate.Year <= DateTime.Now.Year && approvalEndDate.Month > DateTime.Now.Month)
                                    {
                                        trace.Trace("case 2: ");
                                        trace.Trace("approvalStartDate plus add one year value is less than today date : " + approvalStartDate.AddYears(1));
                                        approvalEndDate = new DateTime(DateTime.Now.Year, approvalStartDate.Month, approvalStartDate.Day);
                                        trace.Trace("ne wapproval end date is  : " + approvalEndDate);
                                        entityUpdate.Attributes["cares_approvalenddate"] = approvalEndDate.AddDays(-1);
                                        entityUpdate.Attributes["cares_nextrenewaldate"] = approvalEndDate;
                                    }
                                    else if (approvalEndDate.Year <= DateTime.Now.Year && approvalEndDate.Month == DateTime.Now.Month && approvalEndDate.Day <= DateTime.Now.Day)
                                    {
                                        trace.Trace("case 3: ");
                                        trace.Trace("approvalStartDate plus add one year value is less than today date : " + approvalStartDate.AddYears(1));
                                        approvalEndDate = new DateTime(DateTime.Now.Year + 1, approvalStartDate.Month, approvalStartDate.Day);
                                        trace.Trace("ne wapproval end date is  : " + approvalEndDate);
                                        entityUpdate.Attributes["cares_approvalenddate"] = approvalEndDate.AddDays(-1);
                                        entityUpdate.Attributes["cares_nextrenewaldate"] = approvalEndDate;
                                    }
                                    else if (approvalEndDate.Year <= DateTime.Now.Year && approvalEndDate.Month == DateTime.Now.Month && approvalEndDate.Day > DateTime.Now.Day)
                                    {
                                        trace.Trace("case 4: ");
                                        trace.Trace("approvalStartDate plus add one year value is less than today date : " + approvalStartDate.AddYears(1));
                                        approvalEndDate = new DateTime(DateTime.Now.Year, approvalStartDate.Month, approvalStartDate.Day);
                                        trace.Trace("ne wapproval end date is  : " + approvalEndDate);
                                        entityUpdate.Attributes["cares_approvalenddate"] = approvalEndDate.AddDays(-1);
                                        entityUpdate.Attributes["cares_nextrenewaldate"] = approvalEndDate;
                                    }
                                    else
                                    {
                                        trace.Trace("case 5: ");
                                        trace.Trace("Set Approval End Date and Next Renewal date in Else Condition  : " + approvalEndDate);
                                        entityUpdate.Attributes["cares_approvalenddate"] = approvalEndDate.AddDays(-1);
                                        entityUpdate.Attributes["cares_nextrenewaldate"] = approvalEndDate;
                                    }

                                    if (approvalEndDate > approvalExpiryDate)
                                    {
                                        trace.Trace("case 6: ");
                                        trace.Trace("Set Approval End Date and Next Renewal date in Else Condition  : " + approvalEndDate);
                                        entityUpdate.Attributes["cares_approvalenddate"] = approvalExpiryDate;
                                        entityUpdate.Attributes["cares_nextrenewaldate"] = approvalExpiryDate;
                                    }
                                }
                            }
                            else if (renewalRule == (int)CaresHelper.RenewalRule.Birthday)
                            {
                                trace.Trace("renewal rule is birthdate and Contact id is : " + contactId);
                                DateTime birthdate = caresHelper.GetContactBirthday(contactId, service, trace);
                                trace.Trace("renewal rule is birthdate and birthdate value is  : " + birthdate);
                                int birthMonth = birthdate.Year == 1800 ? 0 : birthdate.Month;
                                int birthDay = birthdate.Year == 1800 ? 1 : birthdate.Day;
                                DateTime date = DateTime.Now;

                                if (DateTime.Now.Month < birthMonth)
                                {
                                    trace.Trace("renewal rule DateTime.Now.Month is less than  birthMonth  : " + birthMonth);
                                    if (birthMonth == 2 && birthDay == 29)
                                    {
                                        if (!DateTime.IsLeapYear(DateTime.Now.Year))
                                        {
                                            birthDay = 28;
                                        }
                                    }
                                    date = new DateTime(DateTime.Now.Year, birthMonth, birthDay);
                                }
                                else if (DateTime.Now.Month > birthMonth)
                                {
                                    trace.Trace("renewal rule DateTime.Now.Month is greater than  birthMonth  : " + birthMonth);
                                    if (birthMonth == 2 && birthDay == 29)
                                    {
                                        if (!DateTime.IsLeapYear(DateTime.Now.Year + 1))
                                        {
                                            birthDay = 28;
                                        }
                                    }
                                    date = new DateTime(DateTime.Now.Year + 1, birthMonth, birthDay);
                                }
                                else if (DateTime.Now.Month == birthMonth && DateTime.Now.Day < birthDay)
                                {
                                    trace.Trace("renewal rule DateTime.Now.Month is equal to  birthMonth and brith day is less than today date : " + birthMonth + " : " + birthDay);
                                    if (birthMonth == 2 && birthDay == 29)
                                    {
                                        if (!DateTime.IsLeapYear(DateTime.Now.Year))
                                        {
                                            birthDay = 28;
                                        }
                                    }
                                    date = new DateTime(DateTime.Now.Year, birthMonth, birthDay);
                                }
                                else if (DateTime.Now.Month == birthMonth && DateTime.Now.Day >= birthDay)
                                {
                                    trace.Trace("renewal rule DateTime.Now.Month is equal to  birthMonth and brith day is greater than today date : " + birthMonth + " : " + birthDay);
                                    if (birthMonth == 2 && birthDay == 29)
                                    {
                                        if (!DateTime.IsLeapYear(DateTime.Now.Year + 1))
                                        {
                                            birthDay = 28;
                                        }
                                    }
                                    date = new DateTime(DateTime.Now.Year + 1, birthMonth, birthDay);
                                }

                                if (approvalExpiryDate < date)
                                {
                                    trace.Trace(" expiry date is less than StartDate + 1 year, Start Date + 1 Year is : " + approvalStartDate.AddYears(1));
                                    entityUpdate.Attributes["cares_approvalenddate"] = approvalExpiryDate;
                                    entityUpdate.Attributes["cares_nextrenewaldate"] = approvalExpiryDate;
                                }
                                else
                                {
                                    entityUpdate.Attributes["cares_approvalenddate"] = date.AddDays(-1);
                                    entityUpdate.Attributes["cares_nextrenewaldate"] = date;
                                }
                            }
                            else
                            {
                                trace.Trace("renewal rule is none");
                                if (entityContext.Attributes.Contains("cares_enddate") && entityContext.Attributes["cares_enddate"] != null)
                                {
                                    trace.Trace("renewal rule is none end date value is : " + entityContext.Attributes["cares_enddate"]);
                                    entityUpdate.Attributes["cares_approvalenddate"] = entityContext.Attributes["cares_enddate"];
                                    entityUpdate.Attributes["cares_nextrenewaldate"] = entityContext.Attributes["cares_enddate"];
                                }
                            }

                            trace.Trace("setting isreset field as false");
                            entityUpdate.Attributes["cares_isreset"] = false;
                            trace.Trace("calling update");
                            ////////service.Update(entityUpdate);

                            trace.Trace("calling reset logic from MVC application");
                            if (doReset)
                            {
                                trace.Trace("entityContext contains isreset field : " + doReset);
                                string URLValue = caresHelper.GetConfigurationKeyValue("MVCUrl", service, trace);
                                if (URLValue != null)
                                {
                                    trace.Trace("Configuration URL retrieved : " + URLValue);
                                    using (WebClient webClient = new WebClient())
                                    {
                                        //Get reset logic from MVC
                                        URLValue = URLValue + "Approval/ApprovalManualReset?approvalId=" + entityContext.Id;
                                        trace.Trace("MVC URL is : " + URLValue);
                                        string json = webClient.DownloadString(URLValue);
                                        trace.Trace("json response is : " + json);
                                        if (!json.Contains("ManualResetDone"))
                                        {
                                            throw new InvalidPluginExecutionException("Error in completing reset action");
                                        }
                                    }
                                }
                            }
                        }
                        else if (pluginContext.Stage == 40 && doReset == false) //Post-Operation
                        {
                            trace.Trace("Allotment logic from Dll Start");
                            if (pluginContext.MessageName == "Update")
                            {
                                trace.Trace("calling Allotment logic from Dll inside Update Message");

                                var allotmentCalculationFromPlugin = new AllotmentCalculationFromPlugin() { UpdateAllotmentCycleDate = true };
                                trace.Trace("Passing parameter UpdateAllotmentCycleDate:true ");
                                allotmentCalculationFromPlugin.SetApprovalAllotmentfromPlugin(entityContext.Id, service, trace);
                                trace.Trace("Allotment logic from Dll Done");

                                //var entityData = service.Retrieve(entityContext.LogicalName, entityContext.Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(true));
                                //if (entityData != null)
                                //{
                                //    string URLValue = caresHelper.GetConfigurationKeyValue("MVCUrl", service, trace);
                                //    if (URLValue != null)
                                //    {
                                //        trace.Trace("For Update Configuration URL retrieved : " + URLValue);
                                //        using (WebClient webClient = new WebClient())
                                //        {
                                //            //Get reset logic from MVC
                                //            URLValue = URLValue + "Approval/ApprovalAllotmentCalculationfromPlugin?approvalId=" + entityContext.Id + "&userId=" + pluginContext.UserId + "&startDate=" + entityData.Attributes["cares_startdate"];
                                //            URLValue = URLValue + "&endDate="+ entityData.Attributes["cares_enddate"] + "&approvalStartDate="+ entityData.Attributes["cares_approvalstartdate"] + "&approvalEndDate="+ entityData.Attributes["cares_approvalenddate"];
                                //            URLValue = URLValue + "&nextRenewalDate=" + entityData.Attributes["cares_nextrenewaldate"];
                                //            trace.Trace("MVC URL is : " + URLValue);
                                //            string json = webClient.DownloadString(URLValue);
                                //            trace.Trace("json response is : " + json);
                                //            if (!json.Contains("ApprovalAllotmentDone"))
                                //            {
                                //                throw new InvalidPluginExecutionException("Error in completing Approval Allotment Calculation");
                                //            }
                                //        }
                                //    }
                                //}
                            }
                        }
                    }
                }

            }
            catch (FaultException fex)
            {
                trace.Trace(fex.InnerException == null ? fex.Message : fex.InnerException.Message);
                throw new InvalidPluginExecutionException(fex.Message);
            }
            catch (Exception ex)
            {
                trace.Trace(ex.InnerException == null ? ex.Message : ex.InnerException.Message);
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }
}
