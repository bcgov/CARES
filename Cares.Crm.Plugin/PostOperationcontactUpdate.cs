// <copyright file="PostOperationcontactUpdate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/27/2018 4:39:38 PM</date>
// <summary>Implements the PostOperationcontactUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Cares.Crm.Core.Allotment;

namespace Cares.Crm.Plugin
{

    /// <summary>
    /// PostOperationcontactUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// fullname
    /// </summary>    
    public class PostOperationcontactUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationcontactUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostOperationcontactUpdate(string unsecure, string secure)
            : base(typeof(PostOperationcontactUpdate))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var pluginContext = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;
            var trace = localContext.TracingService;

            var caresHelper = new CaresHelper();

            trace.Trace("PostOperationcontactUpdate Plugin Starts...");
            trace.Trace("Plugin InitiatingUserId : " + pluginContext.InitiatingUserId);
            trace.Trace("Plugin UserId : " + pluginContext.UserId);
            trace.Trace("Plugin Depth : " + pluginContext.Depth);
            trace.Trace("Plugin Stage : " + pluginContext.Stage);

            try
            {
                //trace.Trace("pluginContext InputParameters Target is : " + pluginContext.InputParameters["Target"]);
                //trace.Trace("getting pluginContext InputParameters Target as EntityReference");
                //if (pluginContext.InputParameters.Contains("Target") && pluginContext.InputParameters["Target"] is EntityReference &&
                //    ((EntityReference)pluginContext.InputParameters["Target"]).LogicalName == "contact")
                //{
                //    var entity = (EntityReference)pluginContext.InputParameters["Target"];
                //    trace.Trace("pluginContext InputParameters retrived Target EntityReference");                    
                //}

                trace.Trace("getting pluginContext InputParameters Target as Entity");
                if (pluginContext.InputParameters.Contains("Target") && pluginContext.InputParameters["Target"] is Entity &&
                    ((Entity)pluginContext.InputParameters["Target"]).LogicalName == "contact")
                {

                    trace.Trace("Validating postImage and preImage");
                    var entityContext = (Entity)pluginContext.InputParameters["Target"];
                    // Entity postImage = (Entity)pluginContext.PostEntityImages["postImage"];
                    Entity preImage = (Entity)pluginContext.PreEntityImages["preImage"];
                    if (!preImage.Attributes.Contains("fullname"))
                    {
                        throw new InvalidPluginExecutionException("[ERROR] Contact (fullname) field is not registered in the PreImage of the Contact's PostOperation step. Please contact the administrator.");
                    }
                    else if (!entityContext.Attributes.Contains("fullname") && !entityContext.Attributes.Contains("birthdate"))
                    {
                      throw new InvalidPluginExecutionException("[ERROR] Updated Contact'sfullname field is not found. Please contact the administrator.");
                    }
                    else
                    {
                        // Update all associated Approval, Order & Return record names
                        // required in "CARE 159: Client name changes should also update all associated Approval, Order & Return record names"
                        trace.Trace("preImage.Attributes[fullname].ToString() : " + preImage.Attributes["fullname"].ToString());
                        if (entityContext.Attributes.Contains("fullname"))
                        {
                            trace.Trace("entityContext.Attributes[fullname].ToString() : " + entityContext.Attributes["fullname"].ToString());

                            string firstName = "";
                            string lastName = "";

                            if (entityContext.Attributes.Contains("firstname"))
                            {
                                firstName = entityContext.Attributes["firstname"] != null ? entityContext.Attributes["firstname"].ToString() : "";
                            }
                            else if (preImage.Attributes.Contains("firstname"))
                            {
                                firstName = preImage.Attributes["firstname"] != null ? preImage.Attributes["firstname"].ToString() : "";
                            }
                            trace.Trace("firstName : " + firstName);

                            if (entityContext.Attributes.Contains("lastname"))
                            {
                                lastName = entityContext.Attributes["lastname"] != null ? entityContext.Attributes["lastname"].ToString() : "";
                            }
                            else if (preImage.Attributes.Contains("lastname"))
                            {
                                lastName = preImage.Attributes["lastname"] != null ? preImage.Attributes["lastname"].ToString() : "";
                            }
                            trace.Trace("lastName : " + lastName);

                            if (preImage.Attributes["fullname"].ToString() != entityContext.Attributes["fullname"].ToString())
                            {
                                caresHelper.OnContactFullNameUpdateOrdersReturns(entityContext.Id, firstName, lastName, service, trace);
                            }
                        }

                        if (entityContext.Attributes.Contains("birthdate"))
                        {
                            // if birthdate is updated update the appropriate end dates
                            if (!System.DateTime.Equals(preImage.Attributes["birthdate"], entityContext.Attributes["birthdate"]))
                            {
                                trace.Trace("birthdate has been updated");
                                caresHelper.OnContactBirthdateChangeUpdateAllotmentDates(entityContext.Id, service, trace, entityContext.GetAttributeValue<DateTime>("birthdate"));
                            }
                        }
                    }
                }
            }
            catch (FaultException fex)
            {
                trace.Trace(fex.InnerException == null ? fex.Message : fex.InnerException.Message);
                throw new InvalidPluginExecutionException(fex.Message);
            }
            catch (Exception ex)
            {
                trace.Trace(ex.InnerException == null ? ex.Message : ex.InnerException.Message);
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }
}
