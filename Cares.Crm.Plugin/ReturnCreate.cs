// <copyright file="PreOperationcares_caresreturnCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/19/2018 10:53:19 AM</date>
// <summary>Implements the PreOperationcares_caresreturnCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using AutoNumberGeneration;
using Microsoft.Xrm.Sdk;

namespace Cares.Crm.Plugin
{

    /// <summary>
    /// PreOperationcares_caresreturnCreate Plugin.
    /// </summary>    
    public class ReturnCreate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public ReturnCreate(string unsecure, string secure)
            : base(typeof(ReturnCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var pluginContext = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;
            var trace = localContext.TracingService;

            var caresHelper = new CaresHelper();

            trace.Trace("ReturnCreate Plugin Starts...");
            trace.Trace("[INFO] Plugin Context's InitiatingUserId : " + pluginContext.InitiatingUserId
                            + "Plugin Context's UserId : " + pluginContext.UserId
                            + "Plugin Depth : " + pluginContext.Depth);
            
            try
            {
                if (pluginContext.MessageName == "Create")
                {
                    trace.Trace("start create logic");
                    if (pluginContext.InputParameters.Contains("Target") && pluginContext.InputParameters["Target"] is Entity &&
                    ((Entity)pluginContext.InputParameters["Target"]).LogicalName == "cares_caresreturn")
                    {
                        trace.Trace("pluginContext InputParameters Target is : " + pluginContext.InputParameters["Target"]);
                        var entity = (Entity)pluginContext.InputParameters["Target"];
                        //Sprint 4 - Req #12.6. The System must populate the Return record Name field for new Return records as follows <<Approval Name>> - <<Current Date (MM/dd/yy)>>"
                        // This req has been implemented in JS on the Return's Create form.
                        //var linkedApproval = entity.Attributes["cares_approvalid"] as EntityReference;
                        //if (linkedApproval == null)
                        //    throw new InvalidPluginExecutionException("Approval doesn't contain data.");
                        //var returnName = linkedApproval.Name + " - " + DateTime.Today.ToString("MM/dd/yy");
                        //trace.Trace("Set the Return's name to '" + returnName + "' value");
                        // entity.Attributes["cares_name"] = returnName;

                        //Sprint 4 - Req #12.7. The system must populate the Return Auth Num field with a unique 7 digit numeric value (EG 0027843)
                        var generateAutoNumber = new GenerateAutoNumber();
                        string nextNumber = generateAutoNumber.GetNextAvailableAutoGeneratedNumber("cares_caresreturn", service, trace);
                        trace.Trace("Set the Return Auth Number to " + nextNumber + " number (generated by the Auto Number.)");
                        entity.Attributes["cares_returnauthnum"] = nextNumber;

                        //Sprint 4 - Req #12.20. The system must update the owner of the Return Record to the MCFD Team 
                        //                       if the parent Approval Record is associated to a Program where the IS MCFD value is Yes.
                        //todo (leo) 


                        trace.Trace("Plugin Execution - End");
                    }
                }
            }
            catch (FaultException fex)
            {
                trace.Trace(fex.InnerException == null ? fex.Message : fex.InnerException.Message);
                throw new InvalidPluginExecutionException(fex.Message);
            }
            catch (Exception ex)
            {
                trace.Trace(ex.InnerException == null ? ex.Message : ex.InnerException.Message);
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }
}
